{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c1948b95_7a0f9bdc",
        "filename": "cue/value.py",
        "patchSetId": 6
      },
      "lineNbr": 240,
      "author": {
        "id": 1017720
      },
      "writtenOn": "2024-06-03T14:12:33Z",
      "side": 1,
      "message": "interesting, why is the naming of Subsume in libcue and cue-py all over the place? we go from Subsume to instance_of and then check_schema. I find this rather confusing.",
      "revId": "e4632a46953c239f1d14711481b3d33193b6d9d7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bdd24d8f_399140c9",
        "filename": "cue/value.py",
        "patchSetId": 6
      },
      "lineNbr": 240,
      "author": {
        "id": 1003505
      },
      "writtenOn": "2024-06-03T14:39:12Z",
      "side": 1,
      "message": "Note that unlike Go, `check_schema` in Python and `checkSchema` in Java will throw an exception. `checkSchema` is the idiomatic name for a throwing validator in Java. For Python I just followed the same pattern.\n\nSo I think these names are pretty good for Java and Python.\n\nPerhaps there is an argument to normalize `cue_instance_of` and `Subsume`.",
      "parentUuid": "c1948b95_7a0f9bdc",
      "revId": "e4632a46953c239f1d14711481b3d33193b6d9d7",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735"
    }
  ]
}