# Code generated internal/ci/ci_tool.cue; DO NOT EDIT.

name: TryBot
"on":
  push:
    branches:
      - ci/test
      - main
  pull_request: {}
  workflow_dispatch: {}
jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        go-version:
          - 1.22.x
        python-version:
          - "3.12"
        runner:
          - ubuntu-22.04
          - macos-14
    runs-on: ${{ matrix.runner }}
    defaults:
      run:
        shell: bash
    if: |-
      (contains(github.event.head_commit.message, '
      Dispatch-Trailer: {"type":"trybot"')) || ! (contains(github.event.head_commit.message, '
      Dispatch-Trailer: {"type":"'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - name: Reset git directory modification times
        run: touch -t 202211302355 $(find * -type d)
      - name: Restore git file modification times
        uses: chetan/git-restore-mtime-action@075f9bc9d159805603419d50f794bd9f33252ebe
      - id: DispatchTrailer
        name: Try to extract Dispatch-Trailer
        run: |-
          x="$(git log -1 --pretty='%(trailers:key=Dispatch-Trailer,valueonly)')"
          if [[ "$x" == "" ]]
          then
             # Some steps rely on the presence or otherwise of the Dispatch-Trailer.
             # We know that we don't have a Dispatch-Trailer in this situation,
             # hence we use the JSON value null in order to represent that state.
             # This means that GitHub expressions can determine whether a Dispatch-Trailer
             # is present or not by checking whether the fromJSON() result of the
             # output from this step is the JSON value null or not.
             x=null
          fi
          echo "value<<EOD" >> $GITHUB_OUTPUT
          echo "$x" >> $GITHUB_OUTPUT
          echo "EOD" >> $GITHUB_OUTPUT
      - if: |-
          ((github.ref == 'refs/heads/main') && (! (contains(github.event.head_commit.message, '
          Dispatch-Trailer: {"type":"')))) && (contains(github.event.head_commit.message, '
          Dispatch-Trailer: {"type":"'))
        name: Check we don't have Dispatch-Trailer on a protected branch
        run: |-
          echo "github.event.head_commit.message contains Dispatch-Trailer but we are on a protected branch"
          false
      - uses: cue-lang/setup-cue@v1.0.0
        with:
          version: v0.8.0
      - name: Early git and code sanity checks
        run: go run cuelang.org/go/internal/ci/checks@v0.11.0-0.dev.0.20240903133435-46fb300df650
      - name: Re-generate CI
        run: |-
          cue cmd importjsonschema ./vendor
          cue cmd gen
        working-directory: ./internal/ci
      - if: always()
        name: Check that git is clean at the end of the job
        run: test -z "$(git status --porcelain)" || (git status; git diff; false)
      - name: Install Go
        uses: actions/setup-go@v5
        with:
          cache: false
          go-version: ${{ matrix.go-version }}
      - name: Set common go env vars
        run: |-
          go env -w GOTOOLCHAIN=local

          # Dump env for good measure
          go env
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
      - id: go-mod-cache-dir
        name: Get go mod cache directory
        run: echo "dir=$(go env GOMODCACHE)" >> ${GITHUB_OUTPUT}
      - id: go-cache-dir
        name: Get go build/test cache directory
        run: echo "dir=$(go env GOCACHE)" >> ${GITHUB_OUTPUT}
      - if: |-
          (((github.ref == 'refs/heads/main') && (! (contains(github.event.head_commit.message, '
          Dispatch-Trailer: {"type":"')))) || (github.ref == 'refs/heads/ci/test'))
        uses: actions/cache@v4
        with:
          path: |-
            ${{ steps.go-mod-cache-dir.outputs.dir }}/cache/download
            ${{ steps.go-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.go-version }}-${{ github.run_id }}
          restore-keys: ${{ runner.os }}-${{ matrix.go-version }}
      - if: |-
          ! (((github.ref == 'refs/heads/main') && (! (contains(github.event.head_commit.message, '
          Dispatch-Trailer: {"type":"')))) || (github.ref == 'refs/heads/ci/test'))
        uses: actions/cache/restore@v4
        with:
          path: |-
            ${{ steps.go-mod-cache-dir.outputs.dir }}/cache/download
            ${{ steps.go-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.go-version }}-${{ github.run_id }}
          restore-keys: ${{ runner.os }}-${{ matrix.go-version }}
      - if: |-
          github.repository == 'cue-lang/cue-py' && (((github.ref == 'refs/heads/main') && (! (contains(github.event.head_commit.message, '
          Dispatch-Trailer: {"type":"')))) || github.ref == 'refs/heads/ci/test')
        run: go clean -testcache
      - name: pip install
        run: pip install -r requirements.txt
      - name: Checkout libcue
        uses: actions/checkout@v4
        with:
          repository: cue-lang/libcue
          path: libcue-checkout
      - name: Build libcue
        run: |-
          go build -o libcue.so -buildmode=c-shared
          cp libcue.so libcue.dylib
          cp libcue.so cue.dll
        working-directory: libcue-checkout
      - name: mypy
        run: mypy .
      - if: runner.os == 'Windows'
        name: Add libcue to PATH
        run: echo '${{ github.workspace }}/libcue-checkout' >> $GITHUB_PATH
      - name: pytest
        run: pytest
        env:
          LD_LIBRARY_PATH: ${{ github.workspace }}/libcue-checkout
          DYLD_LIBRARY_PATH: ${{ github.workspace }}/libcue-checkout
      - if: always()
        name: Check that git is clean at the end of the job
        run: test -z "$(git status --porcelain)" || (git status; git diff; false)
